pointers, memory and more ;) 
by Amit Pinchasi
/////////////////////////////////////////////////////////////////////////////////////////////
a pointer in short is a varible which stores the address of other varible.
int pointer is a pointer which stores the adress of int var.
char pointer is a pointer which stores the adress of char var.
etc, etc..

what else can we do with pointers? we can derefrece the pointer into the varible which
the pointer points to! and here comes the fun part.
if we create a int pointer called a which is points to a point in memory which located
int var b which the value of b is 5, what happened if we derefrence the pointer?
int b = 5;
int * a = &b;
*(a)?
thats going to give us 5!
and thats the difrence between int pointer to a char pointer,
when we defrenceing char pointer the computer know to derefence only 1 byte, 
and when we defrenceing int pointer the computer know to derefence 4 byte,
the size of pointer is going to be same as all type of pointers. and that deopends on
the platform which we compile the program for, and its going to be the size of the 
address bus. in 16 bit computer the size of a pointer is 2 byte, in 32 computer the size
of a pointer is 4 byte and etc.. 

a void pointer is a genreic pounter which can change his type to a another type in runtime.
so if we derefencing a void pointer we get an error, becuase the compiler doesnot no how to
derefrencing a void pointer, and this is why the pointer calls genreic.

a null pointer is a pointer which points to a loction not on the memory of the program
but in the same time not a pointer who would give you segfault. and the value of it is null,

you can have pointer to structs, arrays, a pointer to a pointer and even functions.
when your doing archmatic opertions to pointers for example increamenting the adress will 
jump as the size of the type that being points by the pointer. for example if we add 1 to
an int pointer which points to the adress of 100 we eill get 104 because the size of int
is 4 bytes. 

string in c is char array, or char pointer.

the difrence between pointer and array that in the metadata in the compiler the compiler
store the size of the array, and in pointers he store only the size of the pointer.

const pointer- pointer which have a final value.
a pointer to const var - pointer which points to a const value.
/////////////////////////////////////////////////////////////////////////////////////////////
memory functions
/////////////////////////////////////////////////////////////////////////////////////////////
the sizeof() function takes void pointer (generic function) and returns the size on memory of
the type. 

the memcpy() functions takes, void pointer to destnation, to source and size_t for the size
and copy from dest to src for size_t.

the memmov() function does the same as the memcpy function but in diffrent algorithm.

the memset() function takes a void pointer, size_t, and a charechter and setting in the address
for some size the charcter given.

/////////////////////////////////////////////////////////////////////////////////////////////
the heap,
/////////////////////////////////////////////////////////////////////////////////////////////
the heap is a very large space in memory which we use to store large buffers of memory
in addition the heap is not fast as the satck and data segement, but much larger than them
to get a void pointer to the heap we need to use the malloc() function - memory alloction
which returns a void pointer in the heap, we need manually delete and free the memory
from the heap, with the free() function which get a pointer and remove it from the heap
the heap is acually a memory which the os is ivented! the only way to get to the heap
in asm is to use syscalls, the heap manged by the os. what would we do without os??
